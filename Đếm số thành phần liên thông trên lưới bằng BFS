#include<iostream>
#include<set>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<array>
#include<string>
#include<fstream>
#include<sstream>
#include<cstring>
#include<algorithm>
#include<climits>
#include<cmath>
#include<numeric>
#include<vector>
#include<stack>
#include<cstddef>
#include<utility>
#include<queue>
#include<deque>
#include<iomanip>
#include<random>
#include<cstdbool>
using namespace std;

#define str string
#define ll long long
#define ull unsigned long long
#define l long
#define fl float
#define fi first
#define se second
#define pb push_back
#define PB pop_back()
#define pf push_front
#define PF pop_front()
#define era erase
#define ins insert
#define FOR(i,r,n) for(int i=r ; i<n; ++i)
#define FORn(i,r,n) for(int i=r ; i<=n; ++i)
#define FORen(i,r,n) for(int i=n-1; i>=r; --i)

inline ll gcd(ll a, ll b) { if (b == 0) return a; else return gcd(b, a % b); }
inline ll lcm(ll a, ll b) { return b / gcd(a, b) * a; }
inline ll max(ll a, ll b) { ll max; return max = a > b ? a : b; }
inline ll min(ll a, ll b) { ll min; return min = a < b ? a : b; }

const ll mod = 1000000007;
const ll inf = 1000002804;
const int dx1[8] = { -1,-1,-1,0,0,1,1,1 };
const int dy1[8] = { -1,0,1,-1,1,-1,0,1 };
const int dx2[4] = { -1,0,1,0 };
const int dy2[4] = { 0,-1,0,1 };

char a[1001][1001];
vector<pair<int, int>> edge;
vector<int> v[1001];
bool visited[1001];
bool Visited[1001][1001];
int parent[1001];
int A[505][505];
int V, E, U;
int n, m;

void bfs(int i, int j) {
	Visited[i][j] = true;
	queue<pair<int, int>> q;
	q.push({ i,j });
	cout << i << " " << j << endl;
	while (!q.empty()) {
		pair<int, int> top = q.front();
		q.pop();
		FOR(k, 0, 4) {
			int i1 = top.first + dx2[k];
			int j1 = top.second + dy2[k];
			if (i1 >= 1 and i1 <= n and j1 >= 1 and j1 <= m and Visited[i1][j1] == false and a[i1][j1] == 'X') {
				q.push({ i1,j1 });
				Visited[i1][j1] = true;
				cout << i1 << " " << j1 << endl;
			}
		}
	}
}

void solve() {
	cin >> n >> m;
	FORn(i, 1, n) {
		FORn(j, 1, m) {
			cin >> a[i][j];
		}
	}

	memset(Visited, false, sizeof(Visited));
	int cnt = 0;
	FORn(i, 1, n) {
		FORn(j, 1, m) {
			if (a[i][j] == 'X' and !Visited[i][j]) {
				cout << "Thanh phan lien thong thu: " << cnt + 1 << endl;
				bfs(i, j);
				++cnt;
			}
		}
	}

	cout << cnt;
}


int main() {
	int tc; cin >> tc;
	while (tc--) {
		solve();
		cout << endl;
	}
}
